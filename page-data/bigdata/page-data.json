{"componentChunkName":"component---src-templates-post-layout-tsx-content-file-path-src-content-posts-bigdata-index-mdx","path":"/bigdata/","result":{"pageContext":{"node":{"id":"2ff45148-fa76-55b3-971c-f1435e66906f","frontmatter":{"slug":"bigdata","title":"Real-Time and Batch Processing of Splitwise Data with Big Data Technologies","date":"2023-05-01","description":"This project leverages cutting-edge Big Data technologies to process financial data from Splitwise, both in real-time and batch modes, providing valuable insights with lightning speed. Utilizing a powerful stack that includes Kafka, Spark, Spring Boot, Cassandra, and Docker, this project showcases the seamless integration and real-time processing capabilities of modern Big Data tools. Whether you're tracking shared expenses with friends or analyzing large datasets for business decisions, this system delivers fast, efficient, and scalable solutions.","tags":["Kafka","Big Data","Cassandra","Docker","Docker Compose","Gradle","SBT","Scala","Kotlin","CQL","Keshav Reddy","Keshav Reddy Lingala","Lingala Keshav Reddy","Keshav"],"featuredImage":{"publicURL":"/static/6978333ac2b3b7a7c98bf962d203d360/feature.png"},"techs":["Apache Kafka","Apache Spark","Spring Boot","Hadoop","Apache Cassandra","Docker","Kotlin","Bash","Git"]},"internal":{"contentFilePath":"/home/runner/work/keshavlingala.github.io/keshavlingala.github.io/src/content/posts/bigdata/index.mdx"},"body":"\n\n## Introduction\n\nSplitwise is a free tool for friends and roommates to track bills and other shared expenses, so that everyone gets paid\nback. On the other hand, Big data is a term that describes the large volume of data – both structured and unstructured –\nthat inundates a business on a day-to-day basis. But it’s not the amount of data that’s important. It’s what\norganizations do with the data that matters. Big data can be analyzed for insights that lead to better decisions and\nstrategic business moves.\n\nThis is project to demonstrate the use of multiple big data technologies to process the splitwise data in real time. The\nproject is divided into two parts. The first part is to process the data in real time and the second part is to process\nthe data in batch mode. The project is implemented using Kafka, Spark, Spring Boot, Cassandra, Docker, Docker Compose.\n\n## Architecture\n\n![Architecture ](images/Architecture.jpg)\n\n## Technologies Used\n\n- Kafka\n- Spark\n- Spring Boot\n- Cassandra\n- Docker\n- Docker Compose\n- Gradle\n- SBT\n- Scala\n- Kotlin\n- CQL\n\n## How to run the project\n\n### Prerequisites\n- Docker\n\n### Steps to run the project\n\n- Clone the project\n- Go to the project directory\n- Run the following command to start the project\n```shell\ndocker build -t jobscheduler ./scheduler\ndocker build -t spark-analysis ./sparkanalysis\ndocker build -t kafka-streaming-app ./kafka-streaming-app\n```\nThis will build the docker images for the project.\n- Run the following command to start the project\n\n```shell\ndocker-compose up -d\n```\n\nDocker Desktop should look like this\n\n![Docker Desktop](images/DockerSS.png)\n\n- Wait for 60 seconds to let the cassandra and kafka to start\n- cassandra-init service is expected to stop after 65 seconds (depends on system speed), and init the cassandra database, if it stopped and the\ndatabase is not initialized, run init service again and wait for 60 seconds. ( only required for the first time )\n- After Cassandra service started and inited successfully, start jobscheduler service then\n- Use the below command to add a splitwise user to the system\n\n```shell\ncurl --location --request POST 'localhost:8080/add_user_key?key=<splitwise-api-key>' \\\n--data ''\n```\n\n> Splitwise api key can be generated [here](https://secure.splitwise.com/apps/new)\n\n- Start Kafka-streaming-app service and trigger scheduler application using the below command\n\n```shell\ncurl --location --request GET 'localhost:8080/job/splitwise'\n```\n\n![Trigger Scheduler manually](images/TriggerScheduler.png)\n\n\n- This will trigger the scheduler application to fetch the data from splitwise and push it to kafka\n- Kafka-streaming-app service will consume the data from kafka and process it and push it to cassandra\n- You can start the sparkanalysis service to get the reports generated in [output](./output) folder\n![Add User Key](images/AddUser.png)\n- Spark Analysis service will stop automatically after reports are generated\n- Generated CSV can be interpreted directly using excel or any other tool and can be visualized using any visualization\ntool like Tableau, Power BI, etc.\n","tableOfContents":{"items":[{"url":"#introduction","title":"Introduction"},{"url":"#architecture","title":"Architecture"},{"url":"#technologies-used","title":"Technologies Used"},{"url":"#how-to-run-the-project","title":"How to run the project","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#steps-to-run-the-project","title":"Steps to run the project"}]}]}},"next":{"frontmatter":{"slug":"chainreaction","title":"Chain Reaction Game with AI: A Minimax Algorithm Challenge","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/c2bb899fdab0721c3fb22606ed2876fb/e9fba/feature.png","srcSet":"/static/c2bb899fdab0721c3fb22606ed2876fb/86ee2/feature.png 13w,\n/static/c2bb899fdab0721c3fb22606ed2876fb/88208/feature.png 25w,\n/static/c2bb899fdab0721c3fb22606ed2876fb/e9fba/feature.png 50w,\n/static/c2bb899fdab0721c3fb22606ed2876fb/15e42/feature.png 100w","sizes":"(min-width: 50px) 50px, 100vw"},"sources":[{"srcSet":"/static/c2bb899fdab0721c3fb22606ed2876fb/68795/feature.webp 13w,\n/static/c2bb899fdab0721c3fb22606ed2876fb/2fa99/feature.webp 25w,\n/static/c2bb899fdab0721c3fb22606ed2876fb/dbc4a/feature.webp 50w,\n/static/c2bb899fdab0721c3fb22606ed2876fb/d8057/feature.webp 100w","type":"image/webp","sizes":"(min-width: 50px) 50px, 100vw"}]},"width":50,"height":50}}}}},"previous":{"frontmatter":{"slug":"block-vote","title":"BlockVote: Secure Blockchain-Based Voting Application","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#480808","images":{"fallback":{"src":"/static/279f4873d5d0dc42a0382a3357891615/57a8c/feature.png","srcSet":"/static/279f4873d5d0dc42a0382a3357891615/0d135/feature.png 13w,\n/static/279f4873d5d0dc42a0382a3357891615/ed1b0/feature.png 25w,\n/static/279f4873d5d0dc42a0382a3357891615/57a8c/feature.png 50w,\n/static/279f4873d5d0dc42a0382a3357891615/0590c/feature.png 100w","sizes":"(min-width: 50px) 50px, 100vw"},"sources":[{"srcSet":"/static/279f4873d5d0dc42a0382a3357891615/6623d/feature.webp 13w,\n/static/279f4873d5d0dc42a0382a3357891615/a4064/feature.webp 25w,\n/static/279f4873d5d0dc42a0382a3357891615/6ccb3/feature.webp 50w,\n/static/279f4873d5d0dc42a0382a3357891615/88d32/feature.webp 100w","type":"image/webp","sizes":"(min-width: 50px) 50px, 100vw"}]},"width":50,"height":33}}}}},"frontmatter":{"title":"Real-Time and Batch Processing of Splitwise Data with Big Data Technologies","slug":"bigdata","tags":["Kafka","Big Data","Cassandra","Docker","Docker Compose","Gradle","SBT","Scala","Kotlin","CQL","Keshav Reddy","Keshav Reddy Lingala","Lingala Keshav Reddy","Keshav"],"description":"This project leverages cutting-edge Big Data technologies to process financial data from Splitwise, both in real-time and batch modes, providing valuable insights with lightning speed. Utilizing a powerful stack that includes Kafka, Spark, Spring Boot, Cassandra, and Docker, this project showcases the seamless integration and real-time processing capabilities of modern Big Data tools. Whether you're tracking shared expenses with friends or analyzing large datasets for business decisions, this system delivers fast, efficient, and scalable solutions.","featuredImage":"feature.png","date":"2023-05-01","code":"https://github.com/keshavlingala/SplitwiseRealtimeDataProcessing","techs":["Apache Kafka","Apache Spark","Spring Boot","Hadoop","Apache Cassandra","Docker","Kotlin","Bash","Git"]}}},"staticQueryHashes":["2166032461","2405727277","3983028554","858026118"],"slicesMap":{}}