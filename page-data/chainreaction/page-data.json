{"componentChunkName":"component---src-templates-post-layout-tsx-content-file-path-src-content-posts-chainreaction-index-mdx","path":"/chainreaction/","result":{"pageContext":{"node":{"id":"3b13035b-0b94-50ab-adaa-a0efdfeb360e","frontmatter":{"slug":"chainreaction","title":"Chain Reaction Game with AI: A Minimax Algorithm Challenge","date":"2022-12-14","description":"Imagine a classic board game with a twist: a strategic challenge powered by advanced AI. Chain Reaction combines Angular 15 and the Minimax algorithm to create a web-based game where players vie for control of the board. With sleek Angular Material design and AI that intelligently counters your moves, this game offers a compelling blend of strategy and technology. Play against friends or test your skills against an AI opponent on a dynamic web platform hosted on Firebase.","tags":["Angular Application","Angular Multi module","Javascript","Typescript","HTML","SCSS","Front-end Application","Keshav Reddy","Keshav Reddy Lingala","Lingala Keshav Reddy","Keshav"],"code":"https://github.com/keshavlingala/ChainReactionMinMax","code2":null,"demo":"https://chainreactionai.web.app/","featuredImage":{"publicURL":"/static/c2bb899fdab0721c3fb22606ed2876fb/feature.png"},"techs":["HTML","CSS","Javascript","Typescript","Angular","Firebase"]},"internal":{"contentFilePath":"/home/runner/work/keshavlingala.github.io/keshavlingala.github.io/src/content/posts/chainreaction/index.mdx"},"body":"\n\n\n> Live demo: https://chainreactionai.web.app/\n\n## ABSTRACT\n\nThe chain reaction is a multiplayer game where each player will be assigned a color. It is a two - dimensional array\nwhere each player gets a turn to choose a place on the board. After a player selects a cell on the board the counter on\nthe cell increases, maximum of 3 in each counter else the counter splits to the adjacent rows or columns.\nThe objective of the Chain Reaction is to take control of the board by eliminating your opponents' orbs.\nPlayers take turns placing their orbs in a cell. Once a cell has reached critical mass the orbs explode into the\nsurrounding cells adding an extra orb and claiming the cell for the player. A player may only place their orbs in a\nblank cell or a cell that contains orbs of their own color. As soon as a player loses all their orbs they are out of the\ngame.\nWe created ChainReaction from the beginning and used MiniMax Algorithm in Typescript to build a web application with\nAngular 15 Framework.\n\n\n\n## Introduction\n\nThis project is a web application that has been developed in the Angular framework. It uses the Minimax Algorithm to\nimplement the game of Chain Reaction. Chain Reaction is a two-player game where each player takes turns placing their\npieces on the board in an attempt to take over the board. The goal of the game is to be the last player with pieces on\nthe board.\nThe web application is implemented using the Angular framework and is written in TypeScript. The Minimax Algorithm is\nused to determine the best move for each player. The game also utilizes HTML5 and CSS3 for the user interface. The\napplication is hosted on Firebase and can be accessed from any web browser.\nThe application has a simple user interface that allows the user to easily set up the game, choose the board size, and\nchoose the each player. The user can also choose to play against the computer ,against another human player, or\nComputer-Computer with Human Interaction.\nThe application also features a scoreboard that displays the current scores of each player. This scoreboard is updated\nas each game progresses.\nOverall, this project has implemented the game of Chain Reaction using the Minimax Algorithm in the Angular framework.\nThe application is hosted on Firebase and can be accessed <a href=\"https://chainreactionai.web.app\">here</a>.\n\n\n\n## Chain Reaction Game\n\nChain Reaction is a deterministic, combinatorial game of perfect information for two to eight players. It was developed\nby Buddy-Matt Entertainment for Android and can be downloaded from the Play\nStore [here](https://play.google.com/store/apps/details?id=com.BuddyMattEnt.ChainReaction&amp;hl=en&pli=1). A sample\ngame playing on YouTube can be viewed [here](https://www.youtube.com/watch?v=L15TaZbLUo0).\n\nA combinatorial game is a two-player game with no randomization, such as flipping a coin or rolling a dice. All the\nplayers have perfect information, meaning they know all the information about the state of the game, nothing is hidden.\nWhat makes this game exciting is how unpredictable it can be, even when playing with human friends. It may seem like one\nplayer has the advantage, but then suddenly the other takes over.\n\nThe game is played on an mxn board, typically 9x6. For each cell on the board, there is a critical mass which is equal\nto the number of orthogonally adjacent cells. All cells begin empty and each turn the Red and Green players take turns\nplacing their corresponding colored atoms. When the number of atoms in a cell reaches its critical mass, the cell\nexplodes, sending an atom to each of the orthogonally adjacent cells. If a red cell explodes and there are green cells\naround, the green cells are converted to red. This chain reaction of explosions will continue until all cells are stable\n\n\n### Rules of the Game\n\nFor each cell, the critical mass is determined by the number of orthogonally adjacent cells - 4 for regular cells, 3 for\ncells on the edge, and 2 for cells in the corners.\nAt the start, all cells are empty. Blue and Black players take turns to place their corresponding colored \"atoms\" in an\nempty cell or a cell with one or more of their atoms already placed. When two or more atoms are placed in the same cell,\nthey stack up.\nWhen a cell reaches its critical mass, it explodes and adds an atom to each of its orthogonally adjacent cells while\nlosing as many atoms as its critical mass. This can cause an adjacent cell to reach its critical mass and so on,\ncreating a chain reaction of explosions until all cells are stable.\nIf a blue cell explodes and there are black cells around, they are converted to blue and the other rules of explosions\nstill apply. The same applies to other color.\n\n\n\n### Heuristic Strategy\n\nThe Scores of each player is calculated as number of orbs the current player has in the board.\nHeuristic at any state of the game is decided as score of the current player â€“ score of opponent player. If the game is\na terminal state a heuristic value of +Infinity if player won. -Infinity if Player loses.\nBelow is the utility function to determine the heuristic value of the game state\n\n```typescript\n  //memorize\nfunction utility(node: Node): number {\n    let key = JSON.stringify(node);\n    if (memorize.has(key)) {\n        return memorize.get(key);\n    }\n    if (node.isTerminal()) {\n        return node.state.currentPlayer.color == this.maxColor ? Infinity : -Infinity;\n    }\n    const own = node.state.gameData.flat(1).filter(v => v.value > 0 && v.color == this.maxColor).reduce((v, c) => v + c.value, 0)\n    const opponent = node.state.gameData.flat(1).filter(v => v.value > 0 && v.color != this.maxColor).reduce((v, c) => v + c.value, 0)\n    const value = own - opponent;\n    memorize.set(key, value);\n    return value;\n}\n```\n\n\n\n## Angular Framework\n\nAngular is an open-source web application framework developed and maintained by Google. It is a TypeScript-based\nplatform that allows developers to build dynamic and powerful web applications. Angular is written in TypeScript and\nuses components, directives, and services to create complex applications. It is also used to create single page\napplications (SPAs).\nAngular is one of the most popular frameworks for building modern web applications. It has been used in many popular\nwebsites and applications, such as YouTube, PayPal, Upwork, Freelancer, and Udemy. Angular is known for its scalability,\nspeed, and performance. It is also a great choice for developing large and complex applications.\nAngular is built on the MVC (Model-View-Controller) architecture, which divides an application into three parts: the\nmodel, the view, and the controller. The model stores the data, the view displays the data, and the controller connects\nthe model and the view. Angular also uses a two-way data binding system, which allows changes made to the data in the\nmodel to be reflected instantly in the view.\n\nAngular is an efficient framework for building modern web applications and has been used in many popular websites and\napplications. It is a great choice\n\n\n\n### Typescript\n\nTypeScript is an open-source programming language developed and maintained by Microsoft. It is a strict, strongly typed\nsuperset of JavaScript that compiles to plain JavaScript. TypeScript is designed for the development of large\napplications and transcompiles to JavaScript.\n\nTypeScript adds optional static typing to the language and supports tools for large-scale JavaScript applications for\nany browser, for any host, on any OS. It helps developers to write code that is more maintainable and easier to\nunderstand.\n\nTypeScript supports classes, modules, and interfaces, which helps developers to build robust components. TypeScript also\nsupports static type-checking at compile time, which helps to catch common errors early in the development cycle.\n\nTypeScript is a great choice for any application that needs to be written in JavaScript. It helps to reduce bugs and\nimprove the quality of the code.\n\n\n\n## Minimax Algorithm\n\nThe minimax algorithm is a decision-making algorithm used in artificial intelligence and game theory. It is used to\ndetermine the best move in a two-player game that has a finite number of possible moves. It works by looking at all\npossible moves for each player and then determines which move would be the most beneficial for each player. The\nalgorithm works by having each player assume that the other player is making the best possible move and then choosing\nthe move that would be the best response to that move. The algorithm is beneficial in that it can be used to determine\nthe optimal move in a situation without the need for the player to manually explore all possible moves.\n\n![Minimax](images/minimax.png)\n\n\n\n## Project implementation\n\nThe implementation of the game involves designing the game board, developing the rules of the game, and implementing a\ngraphical user interface (GUI). The game board will consist of a grid of cells. Each cell will represent a space on the\nboard where a player can place their pieces. The rules will define how the pieces can be placed and how a chain can be\nformed. The GUI will allow the players to interact with the game board and make their moves.\nThe development of the game will involve the use of a Typescript language. The code will need to be designed in such a\nway that it can be easily modified and extended. Additionally, the code should be well organized and documented to allow\nfor easy maintenance and debugging.\nFinally, the game should also be tested thoroughly to ensure that it is working correctly. This will involve playing the\ngame several times and ensuring that\n\n\n\n### Class Diagram\n\n![PlainClassdiag.png](images/PlainClassdiag.png)\n\n\n\n### Classes and Dependencies\n\n![Classes_and_Dependencies.png](images/Classes_and_Dependencies.png)\n\n\n\n### Game working screenshots\n\n![1.png](images/screenshots/1.png)\n\n\n![2.png](images/screenshots/2.png)\n\n\n![3.png](images/screenshots/3.png)\n\n\n![4.png](images/screenshots/4.png)\n\n\n![5.png](images/screenshots/5.png)\n\n\n![6.png](images/screenshots/6.png)\n\n\n![7.png](images/screenshots/7.png)\n\n\n![8.png](images/screenshots/8.png)\n\n\n\n### Optimization\n\nAs it is implemented using complex modified Depth-First Search (DFS) and modified Breadth-First Search (BFS) algorithms\napplied on every user move. For min-max decision making, a tree will be built for every possible move and the best move\nwill be chosen. The AI will also be able to adapt and learn from the user moves by adjusting its decision-making process\naccordingly.\nFor each node built the algorithm has to preform multiple DFS as part of user move and the complete application\nundergoes into another recursive application making it very complex and time consuming. For example a board with 5x5\nsize and a user has 25 possible moves in worst case for each action in 25 cells in the board the game undergoes multiple\nDFS and comes to another state returned and added as a child node to the root likewise there will be 24 other actions\nwith each having possibly multiple DFS and all this is a single layer of minimax algorithm. For the AI to get the\noptimal solution the game has to go build a tree with depth 3 i.e the number of nodes created for a single decision\nmaking will be around\n\n- Ideal number of available cells for a user at any arbitrary position will be 25\n- For a depth of 3 the time complexity for each decision will be n^3\n- Each action would take an indeterminate number of DFS based on the game state. For simplicity assuming each move would\ntake n^4.\n- Calculating the final O(n) would be O(n^6) which is dangerously expensive.\nTo optimize this we used memorization in every possible function that is independent of the state as we observed the\npattern of repeating calculations based on the same game state which would optimize the decision making speed.\n\nBelow is the code snippet for the memorization implementation\n\n\n\n```typescript\nconst memorize = new Map<string, any>();\n\n//memorize node and actions\nfunction actions(node: Node): IAction[] {\n    let key = JSON.stringify(node);\n    if (memorize.has(key)) {\n        return memorize.get(key);\n    }\n    // Computation\n}\n\nasync function result(action: IAction, node: Node): Promise<Node> {\n    let key = JSON.stringify(node) + JSON.stringify(action);\n    if (memorize.has(key)\n    )\n        return memorize.get(key);\n// Computation\n}\n\n// memorize\nfunction maxValue(node: Node): number {\n    const key = JSON.stringify(node);\n    if (memorize.has(key)) {\n        return memorize.get(key);\n    }\n    // Computation\n}\n\n//memorize\nfunction minValue(node: Node): number {\n  let key = JSON.stringify(node);\n  if (memorize.has(key)) {\n    return memorize.get(key);\n  }\n  // Computation\n}\n```\n\n\n\n## Conclusion\n\nIn conclusion, the Chain Reaction Game with Minimax Algorithm Web Project was a successful endeavor. It was able to\nsuccessfully combine the traditional board game of Chain Reaction with the modern artificial intelligence technique of\nMinimax Algorithm. The project was able to provide a challenging and engaging experience for the user. Additionally, the\nproject was able to provide an intuitive and easy to use interface, making it accessible to all users, regardless of\ntheir technical knowledge. All in all, the project was a success, and it provided a great learning experience for the\ndevelopers involved.\n","tableOfContents":{"items":[{"url":"#abstract","title":"ABSTRACT"},{"url":"#introduction","title":"Introduction"},{"url":"#chain-reaction-game","title":"Chain Reaction Game","items":[{"url":"#rules-of-the-game","title":"Rules of the Game"},{"url":"#heuristic-strategy","title":"Heuristic Strategy"}]},{"url":"#angular-framework","title":"Angular Framework","items":[{"url":"#typescript","title":"Typescript"}]},{"url":"#minimax-algorithm","title":"Minimax Algorithm"},{"url":"#project-implementation","title":"Project implementation","items":[{"url":"#class-diagram","title":"Class Diagram"},{"url":"#classes-and-dependencies","title":"Classes and Dependencies"},{"url":"#game-working-screenshots","title":"Game working screenshots"},{"url":"#optimization","title":"Optimization"}]},{"url":"#conclusion","title":"Conclusion"}]}},"next":{"frontmatter":{"slug":"payment-dbs","title":"Seamless Payment Experience: A Full-Stack Solution","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/c5d5beb9a9d4cfde6a2f33f80c29495e/57a8c/history.png","srcSet":"/static/c5d5beb9a9d4cfde6a2f33f80c29495e/0d135/history.png 13w,\n/static/c5d5beb9a9d4cfde6a2f33f80c29495e/ed1b0/history.png 25w,\n/static/c5d5beb9a9d4cfde6a2f33f80c29495e/57a8c/history.png 50w,\n/static/c5d5beb9a9d4cfde6a2f33f80c29495e/2041f/history.png 100w","sizes":"(min-width: 50px) 50px, 100vw"},"sources":[{"srcSet":"/static/c5d5beb9a9d4cfde6a2f33f80c29495e/6623d/history.webp 13w,\n/static/c5d5beb9a9d4cfde6a2f33f80c29495e/a4064/history.webp 25w,\n/static/c5d5beb9a9d4cfde6a2f33f80c29495e/6ccb3/history.webp 50w,\n/static/c5d5beb9a9d4cfde6a2f33f80c29495e/17b47/history.webp 100w","type":"image/webp","sizes":"(min-width: 50px) 50px, 100vw"}]},"width":50,"height":33}}}}},"previous":{"frontmatter":{"slug":"bigdata","title":"Real-Time and Batch Processing of Splitwise Data with Big Data Technologies","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/6978333ac2b3b7a7c98bf962d203d360/d94f3/feature.png","srcSet":"/static/6978333ac2b3b7a7c98bf962d203d360/0d135/feature.png 13w,\n/static/6978333ac2b3b7a7c98bf962d203d360/ed1b0/feature.png 25w,\n/static/6978333ac2b3b7a7c98bf962d203d360/d94f3/feature.png 50w,\n/static/6978333ac2b3b7a7c98bf962d203d360/e0597/feature.png 100w","sizes":"(min-width: 50px) 50px, 100vw"},"sources":[{"srcSet":"/static/6978333ac2b3b7a7c98bf962d203d360/6623d/feature.webp 13w,\n/static/6978333ac2b3b7a7c98bf962d203d360/a4064/feature.webp 25w,\n/static/6978333ac2b3b7a7c98bf962d203d360/56651/feature.webp 50w,\n/static/6978333ac2b3b7a7c98bf962d203d360/7d7ec/feature.webp 100w","type":"image/webp","sizes":"(min-width: 50px) 50px, 100vw"}]},"width":50,"height":34}}}}},"frontmatter":{"title":"Chain Reaction Game with AI: A Minimax Algorithm Challenge","slug":"chainreaction","tags":["Angular Application","Angular Multi module","Javascript","Typescript","HTML","SCSS","Front-end Application","Keshav Reddy","Keshav Reddy Lingala","Lingala Keshav Reddy","Keshav"],"description":"Imagine a classic board game with a twist: a strategic challenge powered by advanced AI. Chain Reaction combines Angular 15 and the Minimax algorithm to create a web-based game where players vie for control of the board. With sleek Angular Material design and AI that intelligently counters your moves, this game offers a compelling blend of strategy and technology. Play against friends or test your skills against an AI opponent on a dynamic web platform hosted on Firebase.","featuredImage":"feature.png","date":"2022-12-14","code":"https://github.com/keshavlingala/ChainReactionMinMax","demo":"https://chainreactionai.web.app/","techs":["HTML","CSS","Javascript","Typescript","Angular","Firebase"]}}},"staticQueryHashes":["2166032461","2405727277","3983028554","858026118"],"slicesMap":{}}